{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","cardsArray","robots","map","user","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCDSC,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OAEI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCcLK,EArBE,SAAC,GAAc,IAGtBC,EAHqB,EAAZC,OAGWC,KAAI,SAACC,GAC3B,OACI,kBAAC,EAAD,CACIC,IAAKD,EAAKR,GACVA,GAAIQ,EAAKR,GACTF,KAAMU,EAAKV,KACXC,MAAOS,EAAKT,WAKxB,OACI,6BACKM,ICAEK,EAjBG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAIhB,OACI,yBAAKV,UAAU,OACX,2BACIH,KAAK,iBACLc,KAAK,SACLC,YAAY,gBACZZ,UAAU,oCACVa,SAAUH,MCHXI,EATA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAER,yBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEN,EAAMO,WCkBJC,E,kDArBX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IACDS,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAA4B,IAAxBG,KAAKJ,MAAMC,SACJ,0DAEJG,KAAKb,MAAMO,a,GAjBCQ,IAAMC,WCiElBC,G,wDArDX,aAAc,IAAD,8BACT,gBAgBJtB,eAAiB,SAACuB,GAGd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAlBzC,EAAKZ,MAAQ,CAETnB,OAAQ,GACR6B,YAAa,IALR,E,gEAUQ,IAAD,OAChBG,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAUtC,MAE0Bb,KAAKJ,MAA5BnB,EAFH,EAEGA,OAAQ6B,EAFX,EAEWA,YAGTQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OACIA,EAAM/C,KAAKgD,cAAcC,SAASZ,EAAYW,kBAGtD,OAAsB,IAAlBxC,EAAO0C,OACA,uCAIH,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,eAAgBkB,KAAKlB,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUL,OAAQqC,W,GA7C5BZ,IAAMC,YCHxBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLV,QAAQU,MAAMA,EAAMiC,a","file":"static/js/main.31ff5e39.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\nconst Card = ({name, email, id}) => { //destructuring\n    \n    return (\n\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 bw2 grow shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\n\nconst CardList = ({robots}) => {\n    \n    // let robots = props.robots;\n    const cardsArray = robots.map((user) => {\n        return (\n            <Card \n                key={user.id} \n                id={user.id} \n                name={user.name} \n                email={user.email}\n            />\n        )\n    })\n\n    return(\n        <div>\n            {cardsArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({onSearchChange}) => {\n\n\n\n    return(\n        <div className=\"pa2\">\n            <input \n                name=\"top-search-bar\"\n                type=\"search\" \n                placeholder=\"search robots\"\n                className=\"pa3 ba b=--green bg-lightest-blue\"\n                onChange={onSearchChange}\n            />\n        </div>\n        \n    );\n}\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    console.log(props);\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundry extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n\n    render() {\n        if (this.state.hasError === true) {\n            return <h1>Oooooops. That is not good</h1>;\n        }\n        return this.props.children;\n    }\n\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css';\n\n//PROPS are things that come out of state STATE >> props\n//STATE (an object that describes our application) can change\n// Components with state are smart components\n\n\nclass App extends React.Component {\n    \n    constructor(){\n        super();\n        this.state = { // these are the things that can change and \n                       //usually live in the parent component that passes state to different components\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    //if the component mounted then run this\n    componentDidMount() {\n        fetch('http://jsonplaceholder.typicode.com/users') // fetching the users from API fetch is a tool tool to make requests from servers and is part of the window obj\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}))\n    }\n\n    // in search box we need onSearchChange\n    onSearchChange = (event) => { // use arrow functions to be able to use this in terms of the object\n        \n        //setting state for searchfield\n        this.setState({searchfield: event.target.value}) //triggers a re render calling the render function\n    }\n\n    render(){\n        // Destructer state\n        const {robots, searchfield} = this.state;\n\n        //filter array based on the searchfield\n        const filteredRobots = robots.filter(robot => { // the value of this is the input function that called it!!!\n            return(\n                robot.name.toLowerCase().includes(searchfield.toLowerCase())\n            )\n        })\n        if (robots.length === 0){ // if it is taking a while to load\n            return <h1>Loading</h1>\n        }\n        else{\n            return(\n                <div className=\"tc\">\n                    <h1 className=\"f1\">RoboFriends</h1>\n                    <SearchBox onSearchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                \n                </div>\n            );\n        }\n    };\n}\n\nexport default App;"," // react uses webpack that allows us to use import\n\nimport React from 'react'; // this is the robot that handles the view (can be anything)\nimport ReactDOM from 'react-dom'; // specifically for websites\nimport './index.css'; // can add css for each component\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}